/* REXX -- LEFT JUSTIFY all lines within C or CC range */
/* author: David McRitchie, "The REXX Macros Toolbox", 1992/04/30 */
/*  (default)   left justify each line to first non blank (p'^')   */
/*         NB   left justify each line to first non blank (p'^')   */
/*          Q   left justify each line to first single quote ("'") */
/*         QQ   left justify each line to first double quote ('"') */
/*     string   left justify to any character or string            */
/* words must be capitalized   C ISPEXEC ISREDIT NOPROCESS PROCESS */
/* capitalized for comparison  NB Q QQ                             */
/* on SPF/PC  1) change ^ to √Å,  2) comment CONTROL ERRORS lines,  */
/*            3) remove ADDRESS from MSG(  lines  and capitalize   */
address "ISREDIT"
"macro NOPROCESS (token)"
token = translate(token)   /* convert to uppercase for comparisons */
if token = "" then token = "NB"  /* set default if missing */
address "ISPEXEC" "control errors return"  /* comment out in SPF/PC */
"PROCESS range C"
if rc < 8 then do /* bug in SPF/PC use  <= 8 in spf/pc, < 8 on tso*/
   labf = ".zfrange"
   labl = ".zlrange"
end
else do
  zedsmsg = zerrsm  /* use dialog generated messages */
  zedlmsg = zerrlm
  address   "ISPEXEC" "setmsg msg(isrz000)"
  return 1  /* move cursor to command line */
end
address "ISPEXEC" "control errors cancel"  /* comment out in SPF/PC */
"(bound1,bound2) = bounds"
if bound1 \= 1 then do
  zedsmsg = "BOUNDS error"
  zedlmsg = "use of bounds not permitted, found BOUND" bound1 bound2
  address   "ISPEXEC" "setmsg msg(isrz000)"
  return 12
end

if token = "Q" then findtok = """'"""
else if token = "QQ" then findtok = '''"'''
else if token = "NB" then findtok = "p'^'"
else do
     findtok = ''''token''''
     i = pos('''',token)
     if i \= 0 then findtok = token
end
zedlmsg = "left@" findtok " ------ issued or defaulted"
address   "ISPEXEC" "setmsg msg(isrz000)"
"find first nx  "findtok" .zfrange .zlrange"
if rc \= 0 then return 1
more: "(row,col) = cursor"
if col > 1 then do
   "(line) = line .zcsr"
    line  = substr(line,col)
   "line .zcsr = (line)"
end
"cursor ="  row  "1"
"find last p'^' .zcsr .zcsr"
"find next  nx"  findtok  ".zfrange .zlrange"
if rc \= 0 then return 1
signal more
