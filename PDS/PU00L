/*PU00L     Author: David McRitchie        (written  in REXX)        */
/*                 "The REXX Macros Toolbox"                           */
/*          Created 1993/10/15                                       */
/*-------------------------------------------------------------------*/
/*       Macro: PU00L                                                */
/*       Purpose: Print content of member in EDIT to PU00L           */
/*                as an AFP file for printing -- DEST(TECHPSF)       */
/*-------------------------------------------------------------------*/
/* Related clists: PU00L, TECHPS, @PRINTNX, SCRIPTPS,  @SCRIPT ....  */
/*********************************************************************/
    address "ISREDIT";"MACRO (TOKEN)"
    otoken=token
    address "ISPEXEC" "CONTROL ERRORS RETURN"
    zedsmsg = "**";zedlmsg="**"
    token = " "translate(token)" "
    "(rowx,colx) = cursor"
    qcnt = 0
    q.="";
    parse var token left "CLASS(" class ")" right
    if class = "" then class="A"; else token = left right
    parse var token left "COPIES(" copies ")" right
    if copies = "" then copies="1"; else token = left right
    i = pos(" NX ", token)
    if i \= 0 then do; NXOPT="NX";
      token = substr(token,1,i) substr(token,i+4)
    end; else NXOPT=""
    Address "ISREDIT" "(CHG) = DATA_CHANGED"
    if CHG = "YES" then if NXOPT = "" then do
         zedsmsg = "Not Saved/Not Printed"
         ZEDLMSG = "Data has not been saved, Save then reissue PU00L"
         call msg0
         call note zedlmsg
         call note "  or invoke with NX option ===> PU00L NX"
         exit 1;
    end
    Parse var token left " DEST(" dest ")" right;token = left right
    If dest = "" then dest = "TECHPSF"
     /* TECHPSF for APF output is same physical printer as PU00L */

    SCALE =,
      "1...5...10...15...20...25...30...35...40...45...50...55...60"||,
      "...65...70...75...80...85...90...95..100..105..110..115..120"||,
      "..125..130..135..140..145..150..155..160..165..170..175..180"
    /* find long line 80=gt12, 105=gt15, 120=gt18, 132=gt20, 160=gt24*/
    "(var016) = data_width"
    data_width = var016
    /* attempt to reduce apparent data_width */
    call dwchk 133 118 121 106 80 65 72 57

    if NXOPT = "NX" then do; data_width = data_width + 16
        scale = left(" ",15)scale;
    end;

    if data_width <= 73 then do;
          scale = substr(scale,1,70);
          font = "GB10"; signal ready;
    end;
    if data_width <= 80 then do;
          scale = substr(scale,1,80);
          font = "GT12"; signal ready;
    end;
    if data_width >= 133 then do
       "seek first 133" data_width "p'^'"  NXOPT
       if rc = 0 then do;
          scale = substr(scale,1,160);
          font = "GT24"; signal ready;
       end;
    end
    if data_width >= 121 then do
       "seek first 121" data_width "p'^'"  NXOPT
       if rc = 0 then do;
          scale=substr(scale,1,132);
          font = "GT20"; signal ready;
       end;
    end
    if data_width >= 106 then do
       "seek first 106" data_width "p'^'"  NXOPT
       if rc = 0 then do;
          scale=substr(scale,1,120);
          font = "GT18"; signal ready;
       end;
    end
    if data_width >= 81  then do
       "seek first 81 " data_width "p'^'"  NXOPT
       if rc = 0 then do;
          scale=substr(scale,1,105);
          font = "GT15"; signal ready;
       end;
    end
    scale = substr(scale,1,80)
    font = "GT12";
 ready:
    "(say1,say2) = cursor"
    "CURSOR =" rowx colx
    ZEDSMSG =
    ZEDLMSG = "** Process into Q. ---------- **"
    ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK"
    call msg0

    ADDRESS "ISREDIT" "(DSN) = DATASET"
    ADDRESS "ISREDIT" "(MEMBER) = MEMBER"
    SYSUID = SYSVAR("SYSUID")
    userid = SYSVAR("SYSUID")
    inputdsn = "'"sysuid".SPELL.MACRO.TEXT'"
    if member = '' then dsname="'"dsn"'"
    else dsname ="'"dsn"("strip(member)")'"
    s9999 = "'"sysuid".s9999.list'"
    PROFILE = "DSMPROF4"       /*DEFAULT*/
    /* TSO dataset conventions for use w/o quotes */
    /* Allocate DCF input dataset -- allow up to 200 bytes/rec*/
    ADDRESS "TSO"
    status = msg("off")
    Address "TSO"
    "free fi(ESPELL)";"free da("inputdsn")"
    "free da("s9999")"
    if sysdsn(inputdsn) = "OK" then "del" inputdsn
    if sysdsn(s9999)    = "OK" then "del" s9999
    status = msg("on")
    "ALLOC FI(ESPELL) NEW CAT SPACE(45 45) TRACKS UNIT(SYSDA)" ,
      "LRECL(255) RECFM(V B M) BLKSIZE(3156)" ,
      "DSN("inputdsn") REUSE"
    /*  DCB attributes to the contrary will be reset by DCF */

    /* Open file and SAY some SCRIPT commands to be sure */
    /* data is formatted properly for parsing (later).     */

    Address "ISREDIT"
    qcnt=qcnt+1; q.qcnt =".pm .9i"
    qcnt=qcnt+1; q.qcnt =".rh on"
    qcnt=qcnt+1; q.qcnt =".ll 6i"
    qcnt=qcnt+1; q.qcnt =".bf @smalls ="
    qcnt=qcnt+1; q.qcnt =".dc ps Â¢"
/*********************************************************************/
/*     qcnt=qcnt+1; q.qcnt =".se TODAY  '&DAY(&SYSDAYOFW.).,",       */
/*          "&MONTH(&SYSMONTH.). &SYSDAYOFM., 19&SYSYEAR.'"          */
/*********************************************************************/
    qcnt=qcnt+1; q.qcnt =".ri <Printed via PU00L> for" dsname,
          " "font " on &DAY(&SYSDAYOFW.)",
          date("o") "at" time("n")"           &rbl."
    saveq = q.qcnt
    qcnt=qcnt+1; q.qcnt =".pf"
    qcnt=qcnt+1; q.qcnt =".sp 1"
    qcnt=qcnt+1; q.qcnt =".rh off"
    qcnt=qcnt+1; q.qcnt = ".rf odd  "
    qcnt=qcnt+1; q.qcnt = ".pm .6i  "
    qcnt=qcnt+1; q.qcnt = ".ll 7.2i "
    qcnt=qcnt+1; q.qcnt = ".sv off  "
    qcnt=qcnt+1; q.qcnt = ".fo right"
    qcnt=qcnt+1; q.qcnt = ".sp 2    "
    qcnt=qcnt+1; q.qcnt = " &$PS    "
    qcnt=qcnt+1; q.qcnt = ".rf off  "
    qcnt=qcnt+1; q.qcnt = ".rf even "
    qcnt=qcnt+1; q.qcnt = ".sv off  "
    qcnt=qcnt+1; q.qcnt = ".fo left "
    qcnt=qcnt+1; q.qcnt = ".sp 2    "
    qcnt=qcnt+1; q.qcnt = " &$PS.   "
    qcnt=qcnt+1; q.qcnt = ".rf off  "
    qcnt=qcnt+1; q.qcnt =".sv off"
    qcnt=qcnt+1; q.qcnt =".ll 7.5i"
    qcnt=qcnt+1; q.qcnt =".if 1403 = &$PDEV. .llmax"
    call dirinfo; /* directory info extracted from @PRINTNX */
    qcnt=qcnt+1; q.qcnt =".dd file dsn "dsname
    qcnt=qcnt+1; q.qcnt =".bf" font "gt15 ="
    qcnt=qcnt+1; q.qcnt =".fo off fold"
    /******* bring in file currently in edit *********************/
    /*******   .imfile is a special DCF macro for this purpose   */
    if NXOPT = "" then do; qcnt=qcnt+1; q.qcnt =".imfile file";end;
    else call modified_input    /* or use alternative for unsaved*/
    /*************************************************************/
    qcnt=qcnt+1; q.qcnt =".pf"
    qcnt=qcnt+1; q.qcnt =".sk 1"
    qcnt=qcnt+1; q.qcnt =".ll 6i"
    qcnt=qcnt+1; q.qcnt =".hr left right" /* instead of  .$PARM */
    qcnt=qcnt+1; q.qcnt =".ll 7.5i"
    qcnt=qcnt+1; q.qcnt =".bf" font "="
    qcnt=qcnt+1; q.qcnt =scale
    qcnt=qcnt+1; q.qcnt = ".if &$PASS = &$PSNO. .$FONT TY"
    qcnt=qcnt+1; q.qcnt =".pf"
    qcnt=qcnt+1; q.qcnt =".ll 6i"
    qcnt=qcnt+1; q.qcnt =".bf" font "="
    qcnt=qcnt+1; q.qcnt =".se face '&$TYPESIZE. &$TYPEFACE.'"
    if pos("BROWSE",token) \= 0 then do
      qcnt=qcnt+1; q.qcnt =".$font ty"
    end
    qcnt=qcnt+1; q.qcnt =".pf"
    qcnt=qcnt+1; q.qcnt =".bf @smalls ="
    qcnt=qcnt+1; q.qcnt =saveq " with" font "(&face.)"
    qcnt=qcnt+1; q.qcnt =".pf"

    extra_lines = qcnt  /* lines added in front of file */
    Address "TSO" "EXECIO * DISKW ESPELL (STEM Q. FINIS"
    /* Invoke SCRIPT/VS */
    Address "TSO" "SCRIPT" inputdsn,
        " PRO('SCRIPT.R40.MACLIB(DSMPROF4)') LIB('SCRIPT.R40.MACLIB')",
        " FO('SYS1.PROD.FONT300') index seg('sys1.seglib') DEV(PG4A)",
        " CHARS(X0H21001) FP(2)SYS(X NO H NO D YES ) M(ID)",
        " FILE("s9999")"
    SCRIPT_RC = RC
    status = msg("off")
    address "TSO" "FREE DA("s9999")"
    status = msg("on")
    i = pos("BROWSE",token)
    if i \= 0 then do;  /* debugging check files created*/
            SAY "SCRIPT return code rc="script_rc  "CLASS="class,
               "font" font "scale=" length(scale),
               "one of longer lines" say1 say2
            address "TSO" "$BROWSE" dsname
            address "TSO" "$EDIT"   inputdsn
            address "TSO" "$BROWSE" s9999;
            Address "ISREDIT" "MEND"
            say zerrmsg zedsmsg zedlmsg zcmd
            exit 1;
            SAY "THIS STATEMENT SHOULD NEVER APPEAR"
    end;
    ZEDSMSG =""
    ZEDLMSG = "** Completed----------------- ** -- FINAL PHASE"
    ADDRESS "ISPEXEC" "CONTROL DISPLAY LOCK"
    call msg0

    status = msg("off")
    Address "TSO"
   "FREE FI(ESPELL) DELETE"
   "FREE OUTDES(NAME1) FI(SYSUT1 SYSUT2 SYSPRINT)"
    status = msg("on")
    OUTDES = "CLASS("class") DEST("dest")",
        "FORMDEF(A10111) LINECT(0) GROUPID(PU00L)"
   "OUTDES NAME1" OUTDES
  /* class = A*/
   "ALLOC FI(SYSPRINT) DUMMY                 "
   "ALLOC FI(SYSUT1) DA("s9999") SHR"
   "ALLOC FI(SYSUT2) SYSOUT("class") OUTDES(NAME1) COPIES("copies")"
   "ALLOC FI(SYSIN) DUMMY REUSE              "
   "CALL 'SYS1.LINKLIB(IEBGENER)'            "
   if rc = 0 then
   ZEDSMSG = "Printed"
   ZEDLMSG = time("n"),
      "PU00L -Document has been Printed to CLASS("class")" font,
      "DEST(TECHPSF) copies("copies")"
   call note zedlmsg
   call msg0
   address "ISREDIT" "UP MAX"
   "FREE FI(SYSUT1 SYSUT2) OUTDES(NAME1)     "
   "ALLOC FI(SYSIN) DA(*) REUSE              "
   "ALLOC FI(SYSPRINT) DA(*) REUSE           "
   Address "ISREDIT" "UP MAX"
   Address "ISREDIT" "MEND"
   exit 1;
   say "This statement--should never print"
 dirinfo:
 /******** extracted from @PRINTNX *******************/
  address "ISREDIT"
  " (VAR018) = DATAID"
  " (VAR018A) = DATASET"
  " (VAR043) = MEMBER"
  " (DSNX)          = DATASET"
  " (NUMX)          = NUMBER"
  x = LISTDSI("'"DSNX"'") "DIRECTORY"
  LMSG = "DCB=(RECFM="SYSRECFM",LRECL="SYSLRECL",BLKSIZE="SYSBLKSIZE,
        ||",DSORG="SYSDSORG")  NUMBER "NUMX
  IF VAR043 = "" THEN DO
          xyz=""  /* statistics not avail. for sequential file */
          signal nostats;
  END
  Address "ISPEXEC" "LMINIT DATAID(DDVAR) DATASET('"VAR018A"') ENQ(SHR)"
  if rc \= 0 then say "LMINIT RC="RC
  Address "ISPEXEC" "LMOPEN DATAID("ddvar") OPTION(INPUT)"
  if rc \= 0 then  say "LMOPEN RC="RC
  Address "ISPEXEC" "LMMFIND DATAID("ddvar") MEMBER("VAR043")",
     "STATS(YES)"
  if rc \=0 then say "LMFIND RC="RC
  LRC = RC
  IF LRC = 8 THEN  NOTFOUND = 1
  ZEDLMSG = lmsg; call msg0
  VAR043 = SUBSTR(VAR043,1,8)
  /************************************************************/
   XYZ = VAR043 ZLVERS"."ZLMOD ZLCDATE ZLMDATE
   XYZ = XYZ ZLMTIME ZLCNORC ZLINORC ZLMNORC
   XYZ = XYZ LEFT(ZLUSER,8)
  nostats:
   " (VAR037) = LINENUM .ZLAST"
   IF ZLCNORC ="" THEN XYZ = VAR043,
     "                                  "VAR037"   *NO ",
     "STATISTICS*   "
   IF NOTFOUND = "" THEN XYZ = VAR043  ,
       "<<--------------- no prior statistics exist ---------->>"
   "(VAR014A) = DATA_CHANGED"
   if VAR014A = "NO" then do
      changed = "-- Data Unchanged"
   end
   else do
      changed = "-- Data Changed"
   end
   if xyz \= "" then do
      call note "=== MEMBER-- VV.MM CREATED- ",
          "---MODIFIED---  CURR  INIT   MOD LASTUSER =="
      call note "=== "XYZ" =="""
   end
   IF VAR014A = "YES" THEN
      call note "=== PU00L" otoken "-- issued "||,
         "("date('j')")" date('o') time('n') "Data has been changed "||,
                                    "==========="
   ELSE
      call note "=== PU00L" otoken "-- issued "||,
         "("date('j')")" date('o') time('n') "======================"||,
                                    "==========="
   /* ------------------------------*/

       qcnt=qcnt+1; q.qcnt= ".sk 1"
       qcnt=qcnt+1; q.qcnt= ".kp on"
       qcnt=qcnt+1; q.qcnt= ".bf gt20 gt15 ="
       qcnt=qcnt+1; q.qcnt= ".bx 0 6i"
       qcnt=qcnt+1; q.qcnt= ".in 2 "
       qcnt=qcnt+1; q.qcnt= ".ir 2"
        if xyz \= "" then do
          qcnt=qcnt+1; q.qcnt= " MEMBER-- VV.MM "||,
           "CREATED- ---MODIFIED---  CURR  INIT   MOD LASTUSER"
          qcnt=qcnt+1; q.qcnt= " "XYZ
          qcnt=qcnt+1; q.qcnt= ".bx"
       end
       qcnt=qcnt+1; q.qcnt= " DSN="||left(SYSDSNAME,44),
          "Created" SYSCREATE
       qcnt=qcnt+1; q.qcnt= " "LMSG
       qcnt=qcnt+1; q.qcnt= ".bx off"
       qcnt=qcnt+1; q.qcnt= ".kp off"
       qcnt=qcnt+1; q.qcnt= ".sk 1"
   /* ------------------------------*/
 /*IF ZLCNORC  /="" THEN do*/
     if xyz \= "" then do
      Address "ISPEXEC" "LMCLOSE DATAID("ddvar")"
      if rc \=0 then say "LMCLOSE RC="RC
      Address "ISPEXEC" "LMFREE DATAID("ddvar")"
      if rc \=0 then say "LMFREE  RC="RC
     end
 /*end*/
 /**** end extracted from @PRINTNX *******************/
  return

 modified_input:
 unshown = 0
 /* TECHPS and PU00L contains coding similar to @PRINTNX */
 address "ISREDIT"
 "(maxrec) = LINENUM .ZLAST"
 qcnt=qcnt+1; q.qcnt =".ti 5F 5F"
 qcnt=qcnt+1; q.qcnt =".ti"
 qcnt=qcnt+1; q.qcnt =".dc gml off"
 qcnt=qcnt+1; q.qcnt =".dc cw  off"
 qcnt=qcnt+1; q.qcnt =".li on"
 do rec = 1 to maxrec
    "(XSTATUS) = XSTATUS" REC
    if XSTATUS = "X" then do
       if unshown = 0 then qfrom = rec + 0
       unshown = unshown + 1
    end
    else do
       if unshown /= 0 then do
          recm1 = rec - 1
          qcnt=qcnt+1; q.qcnt = "        - - - - - - - - -",
                unshown "LINE(S), lines" right(QFROM,6,'0')"-"||,
                right(recm1,6,'0') "Not Displayed"
          unshown = 0
       end
       "(LINE) = LINE" rec
       "(LABEL,NEST) = LABEL" rec
       qcnt=qcnt+1; q.qcnt = " "left(label,6) right(rec,6,'0') line
       /* We could have provided more room when labels are not used, */
       /* but chose to keep report uniform for NX listings regard-   */
       /* less of whether labels are used or not.  <design choice>   */
    end
end
qcnt=qcnt+1; q.qcnt = ".li off"
qcnt=qcnt+1; q.qcnt =".dc gml : : e"
qcnt=qcnt+1; q.qcnt =".dc cw 5E"
q.0 = qcnt;
return
NOTE: parse arg arg;
      address "ISREDIT" "line_before .zf = noteline (arg)"; return
MSG0: /* SPF/PC invokes SETMSG in incorrectly */
      if v1 = "REXXSAA"
         then /*Address*/ "ISPEXEC" "SETMSG MSG(ISRZ000)"
         else Address "ISPEXEC" "SETMSG MSG(ISRZ000)"
return  0
dwchk: arg dwchka
  do j = 1 to words(dwchka)
     n=word(dwchka,j); n=n+0; np1=n+1;
     if data_width > n then do
        "seek first p'^' " np1 data_width   NXOPT
        if rc \= 0 then data_width = n
  end
  return
