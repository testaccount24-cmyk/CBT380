            CONTROL ASIS
 /*  TITLE:       NESTCHK   CHECK NESTING OF " DO " AND " END " GROUPS
 /*  USERS:       TSO ISPF EDIT USERS   | SCRIPT USERS
 /*  CONTRIBUTED: 1986/04/24 DAVID MCRITCHIE
 /*
 /*  EXAMPLE:     NESTCHK      ...NO OPERANDS REALLY REQUIRED...
 /*
 /*  OPTIONS:
 /*      LPTR-RANGE | ENTIRE   (OPTIONAL) LINE POINTER RANGE
 /*      CLIST | PLI | SAS
 /*
 ISREDIT     MACRO (TOK1,TOK2,TOK3,TOK4,TOK5,TOK6,TOK7,TOK8,TOK9,TOK10,TOK11,TOK
        TOK14,TOK15,TOK16,TOK17,TOK18,TOK19,TOK20,TOK21,TOK22,TOK23,TOK24,TOK25,
        TOK27,TOK28,TOK29,TOK30,TOK31,TOK32,TOK33,TOK34,TOK35,TOK36,TOK37,TOK38,
        TOK40,TOK41,TOK42,TOK43,TOK44,TOK45,TOK46,TOK47,TOK48)
        ISREDIT (IMAC) = IMACRO
        SET BLANKS = &STR(
        SET BLANKS = &STR(&BLANKS.
        SET E = 0
        SET P = 0
        SET I = 1
        DO WHILE &I <= 48
           SET TOKEN = &&TOK&I
           SET TOKEN = &STR(&SYSCAPS(&TOKEN))
           IF &TOKEN = &STR() THEN GOTO END_TOK
           IF ALL =&STR(&TOKEN) | NEXT =&STR(&TOKEN) | FIRST =&STR(&TOKEN) -
              | LAST =&STR(&TOKEN) | PREV =&STR(&TOKEN) -
              | X    =&STR(&TOKEN) | NX =&STR(&TOKEN) THEN -
           DO
             SET &ZEDSMSG = &STR(&TOKEN INVALID)
             SET &ZEDLMSG = &STR("&TOKEN" NOT PROVIDED FOR NOR ARE NEXT ALL FIRS
             ISPEXEC   SETMSG MSG(ISRZ000)
             EXIT CODE(12)
           END
           IF DETAIL = &TOKEN THEN DO
              SET DETAIL = &TOKEN
              GOTO NXT_TOK
           END
           IF CLIST = &TOKEN THEN DO
              SET CLIST = &TOKEN
              GOTO NXT_TOK
           END
           IF PLI   = &TOKEN THEN DO   /* END */
              SET PLI   = &TOKEN
              GOTO NXT_TOK
           END                          /* DO */
           IF SAS   = &TOKEN THEN DO
              SET SAS   = &TOKEN
              GOTO NXT_TOK
           END
           IF &SUBSTR(1:4,&STR(&TOKEN)       ) = &STR(COL&STR(&LP))  THEN DO
              IF &STR(&COL1) = &STR() THEN DO
                 SET COL1 = &SUBSTR(5:&EVAL(&LENGTH(&STR(&TOKEN))-1),&STR(&TOKEN
                 WRITE &COL1
                 GOTO NXT_TOK
              END
              ELSE DO
                 IF &STR(&COL2) = &STR() THEN DO
                    SET COL2 = &SUBSTR(5:&EVAL(&LENGTH(&STR(&TOKEN))-1),&STR(&TO
                    WRITE &COL2
                    GOTO NXT_TOK
                 END
                 SET &ZEDSMSG = &STR(&TOKEN  3RD USE)
                 SET &ZEDLMSG = COL(&COL1.) COL(&COL2.) ALREADY SPECIFIED FOR LE
                 ISPEXEC SETMSG MSG(ISRZ000)
              END
              EXIT CODE(12)
           END
           IF &TOKEN = ENTIRE THEN DO    /* ENTIRE  |  LPTR-RANGE  */
              SET ENTIRE = ENTIRE
              GOTO NXT_TOK
           END
           IF &TOKEN = &STR()) THEN DO
              SET &ZEDSMSG = &STR(LOST PARENTHESIS)
              SET &ZEDLMSG = BLANKS SEPARATE ALL OPERANDS; THEREFORE INVALID IN
              ISPEXEC SETMSG MSG(ISRZ000)
              EXIT CODE(12)
           END
           SET REMAIN = &STR(&REMAIN &TOKEN)
   NXT_TOK: -
           SET I = &I + 1
        END
   END_TOK: SET JJ = &I
        /*****************************************************************
        /*****************************************************************
        IF &STR(&LABF) = &STR() THEN SET ENTIRE = ENTIRE
        IF ENTIRE = &ENTIRE THEN DO      /************* LABELS ARE REQUIRED ****
           IF &LABF = &STR() THEN DO
              SET LABF = .ZFIRST
              SET LABL = .ZLAST
           END
           ELSE DO
              SET &ZEDSMSG = &STR(LABEL CONFLICT)
              SET &ZEDLMSG = &STR("ENTIRE" IMPLIES .ZFIRST .ZLAST CONFLICTS WITH
              ISPEXEC     SETMSG MSG(ISRZ000)
              EXIT CODE(12)
           END
        END
        ISREDIT (#LABF) = LINENUM &LABF
        IF &LASTCC ^= 0 THEN DO
                   SET &ZEDSMSG = &STR(&LABF. LABEL)
                   SET &ZEDLMSG = &STR(&ZEDSMSG DOES NOT EXIST)
                   ISPEXEC     SETMSG MSG(ISRZ000)
                   EXIT CODE(12)
        END
        ISREDIT (#LABL) = LINENUM &LABL
        IF &LASTCC ^= 0 THEN DO
                   SET &ZEDSMSG = &STR(&LABL. LABEL)
                   SET &ZEDLMSG = &STR(&ZEDSMSG DOES NOT EXIST)
                   ISPEXEC     SETMSG MSG(ISRZ000)
                   EXIT CODE(12)
        END
        /********************************** END OF LABEL REQUIREMENTS **********
        ISREDIT RESET
        ISREDIT (DWIDTH) = DATA_WIDTH
        SET LLADJ = 0
        ISREDIT (VAR049) = NUMBER
        ISREDIT (VAR047) = RECFM
        IF &VAR047 = V AND &VAR049 = ON THEN DO
           SET LLADJ = 8
        END
        ISREDIT RES .ZFIRST .ZLAST
 /*     ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "&VAR049 &VAR047 &LLADJ"
        /************************************** END OF MODIFIED PATTERN CODE  **
        /************************************** END OF MODIFIED PATTERN CODE  **
        ISREDIT FIND .ZFIRST .ZLAST FIRST X'75'
        SET CC = &LASTCC
        IF &CC ^= 0 THEN DO
           ISREDIT FIND .ZFIRST .ZLAST FIRST X'76'
           SET CC = &LASTCC
        END
        IF &CC = 0 THEN DO
                   SET &ZEDSMSG = &STR(X'75' | X'76')
                   SET &ZEDLMSG = &STR(&ZEDSMSG. ENCOUNTERED IN YOUR ORIGINAL DA
                   ISPEXEC     SETMSG MSG(ISRZ000)
                   ISREDIT     LINE_AFTER &LABL. = NOTELINE "*ERROR** &ZEDLMSG."
                   ISPEXEC     SETMSG MSG(ISRZ000)
                   IF &STR(&IMAC) = NONE THEN ISREDIT DOWN MAX
                   EXIT CODE(12)
        END
        /***********************************************************************
        ISREDIT FIND ';DO;' FIRST
        SET CC = &LASTCC
        IF &CC ^= 0 THEN DO
           ISREDIT FIND ';END;' FIRST
           SET CC = &LASTCC
        END
        IF &CC = 0 THEN DO
          ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "&SYSTIME. CANNOT HANDLE ';DO;'
          ISREDIT LINE_AFTER  .ZLAST  = NOTELINE "&SYSTIME. FOR BETTER CHECKING
          ISREDIT LINE_AFTER  .ZLAST  = NOTELINE "&SYSTIME. CANNOT HANDLE ';DO;'
        END
        /***********************************************************************
        ISREDIT FIND 1 'DO' FIRST
        SET CC = &LASTCC
        IF &CC ^= 0 THEN DO
           ISREDIT FIND 1 'END' FIRST
           SET CC = &LASTCC
        END
        IF &CC = 0 THEN DO
          ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "&SYSTIME. CANNOT HANDLE ' DO '
          ISREDIT LINE_AFTER  .ZLAST  = NOTELINE "&SYSTIME. FOR BETTER CHECKING
          ISREDIT LINE_AFTER  .ZLAST  = NOTELINE "&SYSTIME. CANNOT HANDLE ';DO;'
        END
        /***********************************************************************
        ISREDIT LINE_BEFORE &LABF. = NOTELINE "&SYSDATE. &SYSTIME. X'75' AND X'7
        SET PLID1 = ' DO '
        SET PLIX1 = 'ÂDO '               /* CONTAINS HEX X'75' */
        SET PLID2 = ' DO;'
        SET PLIX2 = 'ÂDO;'               /* CONTAINS HEX X'75' */
        SET PLID3 = ' BEGIN;'
        SET PLIX3 = 'ÂBEGIN;'            /* CONTAINS HEX X'75' */
        SET PLID4 = ' PROC '
        SET PLIX4 = 'ÂPROC '             /* CONTAINS HEX X'75' */
        SET PLID5 = ' PROC('
        SET PLIX5 = 'ÂPROC('             /* CONTAINS HEX X'75' */
        SET PLID6 = ' END;'
        SET PLIX6 = '¾END;'              /* CONTAINS HEX X'76' */
        SET PLID7 = ' END '
        SET PLIX7 = '¾END '              /* CONTAINS HEX X'76' */
        /***********************************************************************
        /***********************************************************************
        ISREDIT C ALL &LABF. &LABL. &PLID1. &PLIX1.
        IF &STR(&PLI) ^= PLI AND &STR(&SAS) ^= SAS THEN GOTO EDCLIST
        ISREDIT C ALL &LABF. &LABL. &PLID2. &PLIX2.
        IF &STR(&PLI) = SAS  THEN GOTO EDCLIST
        ISREDIT C ALL &LABF. &LABL. &PLID3. &PLIX3.
        ISREDIT C ALL &LABF. &LABL. &PLID4. &PLIX4.
        ISREDIT C ALL &LABF. &LABL. &PLID5. &PLIX5.
        ISREDIT C ALL &LABF. &LABL. &PLID6. &PLIX6.
     EDCLIST: -
        ISREDIT C ALL &LABF. &LABL. &PLID7. &PLIX7.
        ISREDIT (#LABF) = LINENUM &LABF
        ISREDIT (#LABL) = LINENUM &LABL
        /***********************************************************************
        SET I = 1
        IF &STR(&COL1) = &STR() THEN SET COL1 = 1
        ELSE SET COL1 = &COL1 - &LLADJ.
        IF &STR(&COL2) = &STR() THEN DO
           SET COL2 = &DWIDTH
           IF &COL2 > 80 THEN SET COL2 = 80
        END
        ELSE SET COL2 = &COL2 - &LLADJ.
        ISREDIT EXCLUDE .ZFIRST .ZLAST ALL
 /*     WRITE &COL1 &COL2 LBOUND=&LBOUND + &LLADJ = &LLBOUND   RBOUND=&RBOUND  D
        DO WHILE &I < &COL2
           ISREDIT F P'^' &COL1 &I FIRST
           IF &LASTCC ^= 0 THEN DO
              IF DETAIL = &DETAIL THEN ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "C
              GOTO NXT_III
           END
           ISREDIT EXCLUDE &LABF. &LABL. ALL
           ISREDIT FIND &LABF. &LABL. P'^' &I ALL
           IF &I > &COL1. THEN  ISREDIT EXCLUDE &LABF. &LABL. ALL &COL1 &EVAL(&I
  /*       ISREDIT EXCLUDE &LABF. &LABL. ALL &I ' '
           ISREDIT EXCLUDE &LABF. &LABL. ALL X'75'        /* EXCLUDE DO */
           ISREDIT EXCLUDE &LABF. &LABL. ALL X'76'        /*EXCLUDE END */
           ISREDIT FIND    &LABF. &LABL. ALL &I '/*'
           ISREDIT FIND    &LABF. &LABL. ALL &I "'"
           ISREDIT FIND    &LABF. &LABL. ALL &I "WRITE "
           ISREDIT C ALL NX X'75' ' '
           ISREDIT C ALL NX X'76' ' '
           ISREDIT F ALL X'75'
           ISREDIT F ALL X'76'
           ISREDIT EXCLUDE &LABF. &LABL. ALL &I ' '
           ISREDIT FIND &LABF. &LABL. P'^' &I ALL
           IF &I > &COL1. THEN DO
              ISREDIT EXCLUDE &LABF. &LABL. ALL 1 &EVAL(&I-1) P'^'
              ISREDIT FIND  &LABF. &LABL. X'75' &EVAL(&I.-1) ALL
              ISREDIT FIND  &LABF. &LABL. X'76' &EVAL(&I.-1) ALL
              IF &I > &EVAL(&COL1.+1) THEN  ISREDIT EXCLUDE &LABF. &LABL. ALL &C
           END
           ISREDIT SEEK NX ALL X'75'
           ISREDIT (VAR023D,VAR024D) = SEEK_COUNTS
           ISREDIT SEEK NX ALL X'76'
           ISREDIT (VAR023E,VAR024E) = SEEK_COUNTS
           IF DETAIL = &DETAIL THEN ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "COLU
           IF &EVAL(&VAR023D) ^= &EVAL(&VAR023E) THEN DO
              IF &STR(&NOTE1) = &STR() THEN DO
                 SET NOTE1 = NOTE1
                 ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "COLUMN XX BEING CHECKED
                 ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "COLUMN XX BEING CHECKED
              END
              SET P = &E
              SET E = &I
              IF &VAR023D > &VAR023E THEN DO
                 SET T = DO
                 WRITE &I COLUMN (&EVAL(&I + &LLADJ)) UNMATCHED DO
        ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "COLUMN &EVAL(&I + &LLADJ) UNMATC
              END
              IF &VAR023D < &VAR023E THEN DO
                 SET T = END
                 WRITE &I COLUMN (&EVAL(&I + &LLADJ)) UNMATCHED END
        ISREDIT LINE_BEFORE .ZFIRST = NOTELINE "COLUMN &EVAL(&I + &LLADJ) UNMATC
              END
              SET BAD = &STR(&BAD.  &EVAL(&I.+&LLADJ.) &T.|&EVAL(&VAR023D.)|&EVA
           END
           ELSE DO
              ISREDIT CHANGE ALL NX X'75' X'40'
              ISREDIT CHANGE ALL NX X'76' X'40'
           END
   NXT_III: -
           SET I = &I + 1
        END
  DONE: -
        ISREDIT EXCLUDE ALL .ZFIRST .ZLAST    /* DONT TOUCH NOTES THANK-YOU*/
        ISREDIT CHANGE X'75' X'40' ALL
        ISREDIT CHANGE X'76' X'40' ALL
        ISREDIT RESET CHANGE
        ISREDIT LINE_BEFORE &LABF. = NOTELINE "&SYSDATE. &SYSTIME. X'75' AND X'7
        /*************************************************************/
        IF &STR(&BAD.) = &STR() THEN DO
           SET &ZEDSMSG = &STR(COMPLETED)
           SET &ZEDLMSG = &STR(--SUCCESS-- NESTCHK HAS NOT FOUND ANY UNMATCHED D
           ISREDIT LINE_AFTER  &LABL. = NOTELINE "&SYSDATE. &SYSTIME. &ZEDLMSG"
        END
        ELSE DO
           IF &LENGTH(&STR(&BAD)) > 40 THEN SET BAD = &SUBSTR(1:40,&STR(&BAD.&BL
           SET &ZEDSMSG = &STR(MISALIGNED)
           SET &ZEDLMSG = &STR(&ZEDSMSG. " DO " AND " END "  COLS &BAD.)
           ISREDIT LINE_AFTER &LABL. = NOTELINE "&B. &BAD."
           IF &STR(&LLADJ) ^= 0 THEN -
           ISREDIT LINE_AFTER &LABL. = NOTELINE "&B  HAVE ADDED +&LLADJ. TO COLU
           ISREDIT LINE_AFTER &LABL. = NOTELINE "&SYSDATE. &SYSTIME. -- CHECK AL
           SET COLHD = &STR(1...5...10...15...20...25...30...35...40...45...50..
           ISREDIT LINE_AFTER &LABL. = NOTELINE "&SUBSTR(&EVAL(1+&LLADJ):72,&STR
           ISREDIT LINE_BEFORE &LABF. = NOTELINE "&SUBSTR(&EVAL(1+&LLADJ):72,&ST
           IF &STR(&IMAC) = NONE THEN ISREDIT DOWN MAX
        END
        ISPEXEC     SETMSG MSG(ISRZ000)
        EXIT CODE(0)
