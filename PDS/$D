/*                                 REXX                             */
/*  obtained from TECH.CBT.FILE166.PDS($D) -------------------------*/
/*                                                                  */
/*      This REXX exec will display different MVS control blocks    */
/*                                                                  */
/*      Note:  The HELP Text itself is part of this EXEC.           */
/*      It begins after '/*BEGHELP ... */' and ends at              */
/*      '/*ENDHELP ...*/'.  Any invalid parm will cause the         */
/*      Help text to be displayed.                                  */
/*                                                                  */
/*                                                                  */
/*      Vinh Vu - 1992/05/21 - Origrinal codes - V1.0               */
/*                                                                  */
/*------------------------------------------------------------------*/
/*                                                                  */
/*      06/10'92 - Vinh Vu -                                        */
/*              - Access SYSID from CVT, not from SMF (SMFID).      */
/*              - Pick up CPU model from CVT extenstion, not from   */
/*                serial number.                                    */
/*              - Also display DFP level.                           */
/*                                                                  */
/*     1993/10/07 - Vinh Vu -                                       */
/*              - Add display for LPA List.                         */
/*                                                                  */
/*------------------------------------------------------------------*/

VERSION = '1.1'

/*BEGHELP       - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*                                                                  */
/*                       HELP Text                                  */
/*                                                                  */
/*  Syntax:   $D PARM                                               */
/*                                                                  */
/*     PARM will be one of the following:                           */
/*                                                                  */
/*      o   APF(LIST) to display the APF libraries                  */
/*      o   LINK(LIST) or LLT to display the linklist libraries     */
/*      o   LPA(LIST) to display the LPA List libraries             */
/*      o   PAG(ING) to display paging statistics                   */
/*      o   SS(T) to list all SubSystem names                       */
/*      o   SVC to display the SVC table                            */
/*      o   SYS(TEM) to display system information                  */
/*                                                                  */
/*ENDHELP       - - - - - - - - - - - - - - - - - - - - - - - - - - */


Parse Upper Arg P1
CVTADD  = C2X(Storage(10,4))
PTR     = D2X(X2D(CVTADD)+196)
SMCAADD = C2X(STORAGE(PTR,4))                  /* SMCA pointer      */
SMFID   = Substr(Storage(SMCAADD,20),17,4)     /* Get System SMF ID */

SYSIDL  = C2D('154'x)                          /* SYSID offset      */
SYSID   = Substr(Storage(CVTADD,SYSIDL+4),SYSIDL+1,4)

/*                                                                  */
/*                                                                  */

HEAD = '<$D V'||VERSION||'>       ===> $D' P1
Say HEAD
Say

Select
   When ABBREV('APFLIST',P1,3)        Then Do
        Signal APFDISP
        End
   When (ABBREV('LINKLIST',P1,4)     |,
         ABBREV('LLT',P1,3))          Then Do
        Signal LLTDISP
        End
   When ABBREV('LPALIST',P1,3)        Then Do
        Signal LPADISP
        End
   When ABBREV('PAGING',P1,3)        |,
        ABBREV('PAGE',P1,3)           Then Do
        Signal PAGDISP
        End
   When ABBREV('SST',P1,2)            Then Do
        Signal SSTDISP
        End
   When ABBREV('SVC',P1,3)            Then Do
        Signal SVCDISP
        End
   When ABBREV('SYSTEM',P1,3)            Then Do
        Signal SYSDISP
        End
   Otherwise Do
        LASTLINE = SourceLine()
        I = 1
        Do Until Substr(SourceLine(I),1,9) = '/*BEGHELP'
           I = I+1
           End
        I = I + 1                              /* Skip BEGHELP line */
        If I = LASTLINE Then Exit              /* In case ......... */
        Do Until Substr(SourceLine(I),1,9) = '/*ENDHELP'
           Say SourceLine(I)
           I = I+1
           End
        Exit
        End

/*------------------------------------------------------------------*/

/*                                                                  */
/*      DISPLAY APFLIST                                             */
/*                                                                  */
/*                                                                  */
/*      APF = CVT+x'1E4' = Pointer to the APFList                   */
/*      COUNT will be how many DSN's in APFList                     */
/*                                                                  */

APFDISP:
APFOFF  = '1E4'x                               /* Offset of APF     */
APFOFFD = C2D(APFOFF)                          /* Offset in dec     */
APFADD  = C2X(Substr((Storage(CVTADD,APFOFFD+4)),APFOFFD+1,4))
COUNT   = C2D(Substr((Storage(APFADD,2)),1,2))
DSNDEC  = X2D(APFADD)+2                        /* Ptr to Dsn (dec)  */

/*                                                                  */
/*                                                                  */
/*                                                                  */


Say '         --- APFList For' SYSID '---'
Say
DO I=1 to COUNT
   DSNLENG = C2D(Storage(D2X(DSNDEC),1))-6     /* Get DSname leng   */
   DSNDEC = DSNDEC+1                           /* Go past length    */
   VOLSER = Substr((Storage(D2X(DSNDEC),6)),1,6)
   DSNDEC = DSNDEC+6                           /* Go past VOLSER    */
   DSNAME = Substr((Storage(D2X(DSNDEC),DSNLENG)),1,DSNLENG)
   DSNDEC = DSNDEC+DSNLENG                     /* Go to next entry  */
   DSNAME = Left(DSNAME,44)
   Say Format(I,3,0) ' ' VOLSER ' ' DSNAME
   End

Exit

/*------------------------------------------------------------------*/

/*                                                                  */
/*      DISPLAY LINKLIST                                            */
/*                                                                  */
/*      LLT = CVT+x'4DC'(1244) = Pointer to Linklist Table          */
/*      COUNT will be how many DSN's in Linklist                    */
/*                                                                  */

LLTDISP:
LLTOFF  = '4DC'x                               /* Offset of LLT     */
LLTOFFD = C2D(LLTOFF)                          /* Offset in dec     */
LLTADD  = C2X(Substr((Storage(CVTADD,LLTOFFD+4)),LLTOFFD+1,4))
COUNT   = C2D(Substr((Storage(LLTADD,8)),5,4))
LLTDEC  = X2D(LLTADD)+9                        /* Ptr to Dsn (dec)  */
APFDEC  = X2D(LLTADD)+8+(45*COUNT)             /* Ptr to Flag (dec) */

/*                                                                  */
/*                                                                  */
/*                                                                  */

Say '        --- LinkList For' SYSID '---'
Say
DO I=1 to COUNT
   DSNAME=Substr((Storage(D2X(LLTDEC),44)),1,44)
   LLTDEC = LLTDEC + 45
   APFFLAG=Substr((Storage(D2X(APFDEC),1)),1,1)
   If Bitand(APFFLAG,'80'x) = '80'x Then
      APFMSG = '- APF Lib - '
   Else
      APFMSG = '            '
   APFDEC = APFDEC + 1
   Say Format(I,3,0) ' ' APFMSG DSNAME
   End

Exit


/*------------------------------------------------------------------*/

/*                                                                  */
/*      DISPLAY LPA Libraries List                                  */
/*                                                                  */
/*      CVTEXT  = CVT+x'4AC' = CVT extension                        */
/*      LPALST  = CVTEXT+x'38' = LPA Libraries List                 */
/*                                                                  */

LPADISP:

CVTEXT   = '4AC'x
CVTEOFFD = C2D(CVTEXT)
CVTEADD  = C2X(Substr((Storage(CVTADD,CVTEOFFD+4)),CVTEOFFD+1,4))

LPALOFF  = '38'x                                /* Offset of LPALIST */
LPALOFFD = C2D(LPALOFF)                         /* Offset in dec     */
LPALADD  = C2X(Substr((Storage(CVTEADD,LPALOFFD+4)),LPALOFFD+1,4))
COUNT    = C2D(Substr((Storage(LPALADD,8)),5,4))
DSNDEC   = X2D(LPALADD)+8                       /* Ptr to Dsn (dec)  */


/*                                                                  */
/*                                                                  */

Say '         --- LPAList For' SYSID '---'
Say

DO I=1 to COUNT
   DSNAME = Substr((Storage(D2X(DSNDEC),45)),2,44)
   DSNDEC = DSNDEC+45                          /* Go to next entry  */
   DSNAME = Left(DSNAME,44)
   Say Format(I,3,0) ' ' DSNAME
   End

Exit

/*------------------------------------------------------------------*/
/*                                                                  */
/*      DISPLAY Paging statistics                                   */
/*                                                                  */
/*                                                                  */
/*      ASMVT = CVT + x'2C0'                                        */
/*                                                                  */

PAGDISP:
ASMOFF  = '2C0'x                               /* Offset of ASMVT   */
ASMOFFD = C2D(ASMOFF)                          /* Offset in dec     */
ASMADD  = C2X(Substr((Storage(CVTADD,ASMOFFD+4)),ASMOFFD+1,4))

SARTADD = C2X(Substr((Storage(ASMADD,8)),5,4))  /* SART address     */
PARTADD = C2X(Substr((Storage(ASMADD,12)),9,4)) /* PART address     */

/*                                                                  */
/*                                                                  */
/*                                                                  */

FIRSTADD= C2X(Substr((Storage(PARTADD,56)),53,4))
LASTADD = C2X(Substr((Storage(PARTADD,60)),57,4))
LPAADD  = C2X(Substr((Storage(PARTADD,52)),49,4))

Say '             ------- Paging STAT Display for' SYSID '-------'
Say
Say '                               Burst         Avail Outst I/O' ,
    ' Num  Slots'
Say 'Type Volser Adr Devt Stat  Num Size    Size  Slots  I/O  Err' ,
    ' Cyls PerCyl'
Say

ENTADD  = LPAADD
LPALOOP:
Call PARTDATA
ENTADD  = C2X(Substr((Storage(ENTADD,4)),1,4))
If X2D(ENTADD) ^= 0 Then Signal LPALOOP


ENTADD  = FIRSTADD
PAGLOOP:
Call PARTDATA
If ENTADD ^= LASTADD Then Do
   ENTADD  = C2X(Substr((Storage(ENTADD,4)),1,4))
   Signal PAGLOOP
   End

Exit

PARTDATA:
TYPE1   = Substr((Storage(ENTADD,9)),9,1)
TYPE2   = Substr((Storage(ENTADD,10)),10,1)
PATADD  = C2X(Substr((Storage(ENTADD,36)),33,4))
PCTADD  = C2X(Substr((Storage(ENTADD,40)),37,4))
UCBADD  = C2X(Substr((Storage(ENTADD,48)),45,4))

Select
   When Bitand(TYPE1,'80'x) = '80'x Then Do
      DSATTYPE = 'LPLA'
      End
   When Bitand(TYPE1,'40'x) = '40'x Then Do
      DSATTYPE = 'COMM'
      End
   When Bitand(TYPE1,'20'x) = '20'x Then Do
      DSATTYPE = 'DUPL'
      End
   When Bitand(TYPE1,'10'x) = '10'x Then Do
      DSATTYPE = 'LOCL'
      End
   Otherwise Do
      DSATTYPE = '    '
      End
   End       /* Select */

If Bitand(TYPE2,'40'x) = '40'x Then BADDSAT = 'BAD'
   Else BADDSAT = 'Ok '

UCBNUM   = Substr((Storage(UCBADD,16)),14,3)
UCBVOL   = Substr((Storage(UCBADD,34)),29,6)

PARTNUM = Right(C2D(Substr((Storage(ENTADD,12)),11,2)),3)
BURSTSZE= Right(C2D(Substr((Storage(ENTADD,5)),5,1)),3)
SIZE    = Right(C2D(Substr((Storage(ENTADD,20)),17,4)),8)
AVAIL   = Right(C2D(Substr((Storage(ENTADD,24)),21,4)),6)
OUTSTAND= Right(C2D(Substr((Storage(ENTADD,64)),63,2)),4)
IOERR   = Right(C2D(Substr((Storage(ENTADD,28)),25,4)),3)

CYLNO   = Right(C2D(Substr((Storage(PATADD,10)),9,2)),5)
CYLSIZE = Right(C2D(Substr((Storage(PATADD,12)),11,2)),5)

DEVTYPE = Substr((Storage(PCTADD,10)),5,6)

Say DSATTYPE UCBVOL UCBNUM DEVTYPE BADDSAT PARTNUM  ,
    BURSTSZE SIZE AVAIL OUTSTAND IOERR ,
    CYLNO CYLSIZE
Return

/*------------------------------------------------------------------*/

/*                                                                  */
/*      DISPLAY SubSystems                                          */
/*                                                                  */
/*                                                                  */
/*      JESCT = CVT+x'128' = Pointer to the JESCT                   */
/*      JESCT points to first SSCT which chains to next SSCT        */
/*                                                                  */

SSTDISP:
JCTOFF  = '128'x                               /* Offset of JESCT   */
JCTOFFD = C2D(JCTOFF)                          /* Offset in dec     */
JCTADD  = C2X(Substr((Storage(CVTADD,JCTOFFD+4)),JCTOFFD+1,4))
SSCTADD = C2X(Substr((Storage(JCTADD,28)),25,4))

/*                                                                  */
/*                                                                  */
/*                                                                  */

I = 1
Say '                       --- SUBSYSTEM List For' SYSID '---'
Say

SSTLOOP:
SUBSYS  = Substr((Storage(SSCTADD,12)),9,4)    /* SubSys Name       */
SSVT    = Substr((Storage(SSCTADD,20)),17,4)   /* SSVT Address      */

If C2D(SSVT) = 0 Then
   SSTMSG = '(Dormant)'
Else
   SSTMSG = ''

Say Format(I,3,0) ' ' SUBSYS '    SSCT Address = ' SSCTADD,
    '  SSVT Address = ' C2X(SSVT)  SSTMSG

SSCTADD =C2X(Substr((Storage(SSCTADD,8)),5,4)) /* Next one in chain */
I = I+1
If X2D(SSCTADD) ^= 0 Then Signal SSTLOOP
Exit

/*------------------------------------------------------------------*/

/*                                                                  */
/*      DISPLAY SVC Table                                           */
/*                                                                  */
/*      CVT -> CVTABEND -> SCVT -> SVCTABLE                         */
/*                                                                  */

SVCDISP:
SCVTOFF  = 'C8'x                              /* Offset of SCVT    */
SCVTOFFD = C2D(SCVTOFF)                       /* Offset in dec     */
SCVTADD  = C2X(Substr((Storage(CVTADD,SCVTOFFD+4)),SCVTOFFD+1,4))

SVCOFF   = '84'x
SVCOFFD  = C2D(SVCOFF)
SVCADD   = C2X(Substr((Storage(SCVTADD,SVCOFFD+4)),SVCOFFD+1,4))

/*                                                                  */
/*                                                                  */
   SNUM.0   = 'EXCP/XDAP    '
   SNUM.1 =   'WAIT/WAITR/..'
   SNUM.2 =   'POST         '
   SNUM.3 =   'EXIT         '
   SNUM.4 =   'GETMAIN      '
   SNUM.5 =   'FREEMAIN     '
   SNUM.6 =   'LINK         '
   SNUM.7 =   'XCTL         '
   SNUM.8 =   'LOAD         '
   SNUM.9 =   'DELETE       '
   SNUM.10 =  'GET/FREEM R  '
   SNUM.11 =  'TIME         '
   SNUM.12 =  'SYNCH        '
   SNUM.13 =  'ABEND        '
   SNUM.14 =  'SPIE         '
   SNUM.15 =  'ERREXCP      '
   SNUM.16 =  'PURGE        '
   SNUM.17 =  'RESTORE      '
   SNUM.18 =  'BLDL/FIND    '
   SNUM.19 =  'OPEN         '
   SNUM.20 =  'CLOSE        '
   SNUM.21 =  'STOW         '
   SNUM.22 =  'OPEN TYPE J  '
   SNUM.23 =  'CLOSE TYPE T '
   SNUM.24 =  'DEVTYPE      '
   SNUM.25 =  'TRKBAL       '
   SNUM.26 =  'LOCATE, ETC  '
   SNUM.27 =  'OBTAIN       '
   SNUM.28 =  '"RESERVED"   '
   SNUM.29 =  'SCRATCH      '
   SNUM.30 =  'RENAME       '
   SNUM.31 =  'FEOV         '
   SNUM.32 =  'ALLOC        '
   SNUM.33 =  'IOHALT       '
   SNUM.34 =  'MGCR/QEDIT   '
   SNUM.35 =  'WTO/WTOR     '
   SNUM.36 =  'WTL          '
   SNUM.37 =  'SEGLD/SEGWT  '
   SNUM.38 =  '"RESERVED"   '
   SNUM.39 =  'LABEL        '
   SNUM.40 =  'EXTRACT      '
   SNUM.41 =  'IDENTIFY     '
   SNUM.42 =  'ATTACH       '
   SNUM.43 =  'CIRB         '
   SNUM.44 =  'CHAP         '
   SNUM.45 =  'OVLYBRCH     '
   SNUM.46 =  'TTIMER       '
   SNUM.47 =  'STIMER       '
   SNUM.48 =  'DEQ          '
   SNUM.49 =  '"RESERVED"   '
   SNUM.50 =  '"RESERVED"   '
   SNUM.51 =  'SNAP/SDUMP   '
   SNUM.52 =  'RESTART      '
   SNUM.53 =  'RELEX        '
   SNUM.54 =  'DISABLE      '
   SNUM.55 =  'EOV          '
   SNUM.56 =  'ENQ/RESERVE  '
   SNUM.57 =  'FREEDBUF     '
   SNUM.58 =  'RELBUF/REQBUF'
   SNUM.59 =  'OLTEP        '
   SNUM.60 =  '(E)STAE/STAI '
   SNUM.61 =  'IKJEGS6A     '
   SNUM.62 =  'DETACH       '
   SNUM.63 =  'CHKPT        '
   SNUM.64 =  'RDJFCB       '
   SNUM.65 =  '"RESERVED"   '
   SNUM.66 =  'BTAMTEST     '
   SNUM.67 =  '"RESERVED"   '
   SNUM.68 =  'SYNAD...     '
   SNUM.69 =  'BSP          '
   SNUM.70 =  'GSERV        '
   SNUM.71 =  'ASGNBFR, ETC '
   SNUM.72 =  '"NO MACRO"   '
   SNUM.73 =  'SPAR         '
   SNUM.74 =  'DAR          '
   SNUM.75 =  'DQUEUE       '
   SNUM.76 =  'IFBSTAT      '
   SNUM.77 =  '             '
   SNUM.78 =  'LSPACE       '
   SNUM.79 =  'STATUS       '
   SNUM.80 =  '             '
   SNUM.81 =  'SETPRT       '
   SNUM.82 =  '             '
   SNUM.83 =  'SMFWTM       '
   SNUM.84 =  'GRAPHICS     '
   SNUM.85 =  'DDRSWAP      '
   SNUM.86 =  'ATLAS        '
   SNUM.87 =  'DOM          '
   SNUM.88 =  '             '
   SNUM.89 =  '             '
   SNUM.90 =  '             '
   SNUM.91 =  'VOLSTAT      '
   SNUM.92 =  'TCBEXCP      '
   SNUM.93 =  'TGET/TPUT    '
   SNUM.94 =  'STCC         '
   SNUM.95 =  'SYSEVENT     '
   SNUM.96 =  'STAX         '
   SNUM.97 =  'IKJEGS9G     '
   SNUM.98 =  'PROTECT      '
   SNUM.99 =  'DYNALLOC     '
   SNUM.100 = 'IKJEFFIB     '
   SNUM.101 = 'QTIP         '
   SNUM.102 = 'AQCTL (TCAM) '
   SNUM.103 = 'XLATE        '
   SNUM.104 = 'TOPCTL (TCAM)'
   SNUM.105 = 'IMGLIB       '
   SNUM.106 = '             '
   SNUM.107 = 'MODESET      '
   SNUM.108 = '             '
   SNUM.109 = 'ESR TYPE 4   '
   SNUM.110 = 'DSTATUS      '
   SNUM.111 = '"NO MACRO"   '
   SNUM.112 = 'PGRLSE       '
   SNUM.113 = 'PGFIX/PGFREE/'
   SNUM.114 = 'EXCPVR       '
   SNUM.115 = '             '
   SNUM.116 = 'ESR TYPE 1   '
   SNUM.117 = 'DEBCHK       '
   SNUM.118 = '             '
   SNUM.119 = 'TESTAUTH     '
   SNUM.120 = 'GETMAIN/FREEM'
   SNUM.121 = 'VSAM         '
   SNUM.122 = 'ESR TYPE 2   '
   SNUM.123 = 'PURGEDQ      '
   SNUM.124 = 'TPIO         '
   SNUM.125 = 'EVENTS       '
   SNUM.126 = 'MSS INTERFACE'
   SNUM.127 = '             '
   SNUM.128 = '             '
   SNUM.129 = '             '
   SNUM.130 = 'RACHECK      '
   SNUM.131 = 'RACINIT      '
   SNUM.132 = 'RACLIST      '
   SNUM.133 = 'RACDEF       '
   SNUM.134 = '             '
   SNUM.135 = '             '
   SNUM.136 = '             '
   SNUM.137 = 'ESR TYPE 6   '
   SNUM.138 = 'PGSER (XA)   '
   SNUM.139 = 'CVAF...      '
   SNUM.140 = '             '
   SNUM.141 = '             '
   SNUM.142 = '             '
   SNUM.143 = '             '
   SNUM.144 = '             '
   SNUM.145 = '             '
   SNUM.146 = '             '
   SNUM.147 = '             '
   SNUM.148 = '             '
   SNUM.149 = '             '
   SNUM.150 = '             '
   SNUM.151 = '             '
   SNUM.152 = '             '
   SNUM.153 = '             '
   SNUM.154 = '             '
   SNUM.155 = '             '
   SNUM.156 = '             '
   SNUM.157 = '             '
   SNUM.158 = '             '
   SNUM.159 = '             '
   SNUM.160 = '             '
   SNUM.161 = '             '
   SNUM.162 = '             '
   SNUM.163 = '             '
   SNUM.164 = '             '
   SNUM.165 = '             '
   SNUM.166 = '             '
   SNUM.167 = '             '
   SNUM.168 = '             '
   SNUM.169 = '             '
   SNUM.170 = '             '
   SNUM.171 = '             '
   SNUM.172 = '             '
   SNUM.173 = '             '
   SNUM.174 = '             '
   SNUM.175 = '             '
   SNUM.176 = '             '
   SNUM.177 = '             '
   SNUM.178 = '             '
   SNUM.179 = '             '
   SNUM.180 = '             '
   SNUM.181 = '             '
   SNUM.182 = '             '
   SNUM.183 = '             '
   SNUM.184 = '             '
   SNUM.185 = '             '
   SNUM.186 = '             '
   SNUM.187 = '             '
   SNUM.188 = '             '
   SNUM.189 = '             '
   SNUM.190 = '             '
   SNUM.191 = '             '
   SNUM.192 = '             '
   SNUM.193 = '             '
   SNUM.194 = '             '
   SNUM.195 = '             '
   SNUM.196 = '             '
   SNUM.197 = '             '
   SNUM.198 = '             '
   SNUM.199 = '             '
   SNUM.200 = '             '
   SNUM.201 = '             '
   SNUM.202 = '             '
   SNUM.203 = '             '
   SNUM.204 = '             '
   SNUM.205 = '             '
   SNUM.206 = '             '
   SNUM.207 = '             '
   SNUM.208 = '             '
   SNUM.209 = '             '
   SNUM.210 = '             '
   SNUM.211 = '             '
   SNUM.212 = '             '
   SNUM.213 = '             '
   SNUM.214 = '             '
   SNUM.215 = 'CICS(HPSVC)  '
   SNUM.216 = 'CICS(CSVC)   '
   SNUM.217 = '             '
   SNUM.218 = '             '
   SNUM.219 = '             '
   SNUM.220 = '             '
   SNUM.221 = '             '
   SNUM.222 = '             '
   SNUM.223 = '             '
   SNUM.224 = '             '
   SNUM.225 = '             '
   SNUM.226 = '             '
   SNUM.227 = '             '
   SNUM.228 = '             '
   SNUM.229 = '             '
   SNUM.230 = '             '
   SNUM.231 = '             '
   SNUM.232 = '             '
   SNUM.233 = '             '
   SNUM.234 = '             '
   SNUM.235 = '             '
   SNUM.236 = '             '
   SNUM.237 = '             '
   SNUM.238 = '             '
   SNUM.239 = '             '
   SNUM.240 = '             '
   SNUM.241 = 'VSAMTUNE     '
   SNUM.242 = 'UCC7         '
   SNUM.243 = '             '
   SNUM.244 = '             '
   SNUM.245 = 'UCC11        '
   SNUM.246 = '             '
   SNUM.247 = 'UCC1 (X)     '
   SNUM.248 = 'UCC1 (Y)     '
   SNUM.249 = 'DIAGNOSE     '
   SNUM.250 = '             '
   SNUM.251 = '             '
   SNUM.252 = '             '
   SNUM.253 = '             '
   SNUM.254 = '             '
   SNUM.255 = 'JES3 SDF     '
/*                                                                  */
/*                                                                  */
/*                                                                  */

Say '         --- SVCTABLE Display For' SYSID '---'
Say
Say '                   ' Copies(' ',16) ,
            '                A S P A             '
Say '  SVC# (Hex)  Entry' Copies(' ',16) ,
            '  Amod  Type    P E R S  Lock(s) needed '
Say '                   ' Copies(' ',16) ,
            '                F R E T             '
Say

DO I=0 to 255
   ENTRYPT = Storage(SVCADD,4)                 /*                   */
   AMODE = Substr(ENTRYPT,1,1)
   If Bitand(AMODE,'80'x) = '80'x Then
      ADDR = '31'
   Else
      ADDR = '  '
   SVCTYPE = Substr(Storage(SVCADD,5),5,1)
   If Bitand(SVCTYPE,'20'x) = '20'x Then Do
      TYPEMSG = 'T6   '
      End
   Else
      If Bitand(SVCTYPE,'C0'x) = 'C0'x Then Do
         TYPEMSG = 'T3/4 '
         End
      Else
         If Bitand(SVCTYPE,'80'x) = '80'x Then Do
            TYPEMSG = 'T2   '
            End
         Else
            If Bitand(SVCTYPE,'00'x) = '00'x Then Do
               TYPEMSG = 'T1   '
               End
            Else
               TYPEMSG = '?    '
   If Bitand(SVCTYPE,'08'x) = '08'x Then
      APF = 'A'
   Else
      APF = ' '
   If Bitand(SVCTYPE,'04'x) = '04'x Then
      ESR = 'E'
   Else
      ESR = ' '
   If Bitand(SVCTYPE,'02'x) = '02'x Then
      PRE = 'P'
   Else
      PRE = ' '
   If Bitand(SVCTYPE,'01'x) = '01'x Then
      AST = 'S'
   Else
      AST = ' '
   LOCK    = Substr(Storage(SVCADD,7),7,1)
   LMSG = ''
   If Bitand(LOCK,'80'x) = '80'x Then
      LMSG = LMSG||'LOCL'
   If Bitand(LOCK,'40'x) = '40'x Then
      LMSG = LMSG||',CMS'
   If Bitand(LOCK,'20'x) = '20'x Then
      LMSG = LMSG||',OPT'
   If Bitand(LOCK,'10'x) = '10'x Then
      LMSG = LMSG||',SALLOC'
   If Bitand(LOCK,'08'x) = '08'x Then
      LMSG = LMSG||',DISP'
   IHEX = '    '
   IHEX = Right(D2X(I),2)
   Say ' ' Format(I,3,0) '-' IHEX ' ' ,
       C2X(ENTRYPT) ' ' SNUM.I ' ' ADDR ' ',
       TYPEMSG ' ' APF ESR PRE AST ' ' LMSG
   SVCADD  = D2X(X2D(SVCADD)+8)                /* Bump to next entry */
   End
Say
Exit

/*------------------------------------------------------------------*/

/*                                                                  */
/*      DISPLAY SYSTEM information                                  */
/*                                                                  */
/*                                                                  */
/*      PCCAT = CVT+x'2FC' = Pointer to the PCCA Vector Table       */
/*      PCCAVT has up to 16 PCCA pointers                           */
/*      PCCA Has CPU Serial # plus its physical CPU Id              */
/*                                                                  */
/*      STRGOFF = CVT+x'358' = Online Storage (K's) at IPL          */
/*                                                                  */

SYSDISP:
PVTOFF  = '2FC'x                               /* Offset of PCCAVT  */
PVTOFFD = C2D(PVTOFF)                          /* Offset in dec     */
PVTADD  = C2X(Substr((Storage(CVTADD,PVTOFFD+4)),PVTOFFD+1,4))

STRGOFF  = '358'x
STRGOFFD = C2D(STRGOFF)
STRG     = Substr((Storage(CVTADD,STRGOFFD+4)),STRGOFFD+1,4)

IPLTIME  = '150'x                             /* Offset into SMCA   */
IPLDATE  = '154'x                             /* Offset into SMCA   */
IPLTIMED = C2D(IPLTIME)
IPLDATED = C2D(IPLDATE)

IPLTI  = C2D(Substr(Storage(SMCAADD,IPLTIMED+4),IPLTIMED+1,4))%360000
IPLTRM = C2D(Substr(Storage(SMCAADD,IPLTIMED+4),IPLTIMED+1,4))//360000
IPLTD  = RIGHT(IPLTRM%6000,2,'0')             /* Find # of Minutes  */

IPLT   = IPLTI||'.'||IPLTD
IPLD   = C2X(Substr(Storage(SMCAADD,IPLDATED+4),IPLDATED+1,4))

IPLYEAR  = Substr(IPLD,3,2)
IPLDAY   = Substr(IPLD,5,3)

UCBOFF   = '30'x                         /* CVT+x'30' = SYSRES UCB */
UCBOFFD  = C2D(UCBOFF)
UCBADD   = C2X(Substr((Storage(CVTADD,UCBOFFD+4)),UCBOFFD+1,4))

UCBNUM   = Substr((Storage(UCBADD,16)),14,3)
UCBVOL   = Substr((Storage(UCBADD,34)),29,6)

CVTPRADD = D2X(X2D(CVTADD)-40)
OPSYS    = Substr((Storage(CVTPRADD,8)),1,8)
FMIDS    = Substr((Storage(CVTPRADD,16)),9,8)
CPUTYPE  = C2X(Substr((Storage(CVTPRADD,36)),35,2))
MVSREL   = Substr((Storage(CVTPRADD,40)),37,4)

DFAOFF   = '4C0'x                        /* CVT+x'4C0' = DFA       */
DFAOFFD  = C2D(DFAOFF)
DFAADD   = C2X(Substr((Storage(CVTADD,DFAOFFD+4)),DFAOFFD+1,4))

DFPREL   = C2X(Substr((Storage(DFAADD,4)),3,2))
DFPREL   = Substr(DFPREL,1,3)

ASMOFF  = '2C0'x                               /* Offset of ASMVT   */
ASMOFFD = C2D(ASMOFF)                          /* Offset in dec     */
ASMADD  = C2X(Substr((Storage(CVTADD,ASMOFFD+4)),ASMOFFD+1,4))

IPLFLG  =  Substr((Storage(ASMADD,2)),2,1)

CVTEXT   = '4AC'x
CVTEOFFD = C2D(CVTEXT)
CVTEADD  = C2X(Substr((Storage(CVTADD,CVTEOFFD+4)),CVTEOFFD+1,4))

MLPABEG  = C2X(Substr((Storage(CVTEADD,12)),9,4))
MLPAEND  = C2X(Substr((Storage(CVTEADD,16)),13,4))

FLPABEG  = C2X(Substr((Storage(CVTEADD,20)),17,4))
FLPAEND  = C2X(Substr((Storage(CVTEADD,24)),21,4))

PLPABEG  = C2X(Substr((Storage(CVTEADD,28)),25,4))
PLPAEND  = C2X(Substr((Storage(CVTEADD,32)),29,4))

WNUCBEG  = C2X(Substr((Storage(CVTEADD,36)),33,4))
WNUCEND  = C2X(Substr((Storage(CVTEADD,40)),37,4))

RNUCBEG  = C2X(Substr((Storage(CVTEADD,44)),41,4))
RNUCEND  = C2X(Substr((Storage(CVTEADD,48)),45,4))

ENUCBEG  = C2X(Substr((Storage(CVTEADD,52)),49,4))
ENUCEND  = C2X(Substr((Storage(CVTEADD,56)),53,4))

EPLPABEG = C2X(Substr((Storage(CVTEADD,60)),57,4))
EPLPAEND = C2X(Substr((Storage(CVTEADD,64)),61,4))

EFLPABEG = C2X(Substr((Storage(CVTEADD,68)),65,4))
EFLPAEND = C2X(Substr((Storage(CVTEADD,72)),69,4))

EMLPABEG = C2X(Substr((Storage(CVTEADD,76)),73,4))
EMLPAEND = C2X(Substr((Storage(CVTEADD,80)),77,4))

/*                                                                  */
/*                                                                  */
/*                                                                  */
D1  = Substr(DATE('J'),1,2)
D2  = Substr(DATE('J'),3,3)
D1N2 = D1||'.'||D2

Say '         --- SYSTEM INFO Display For' SYSID '---'
Say
Say ' Today =' D1N2 'or' DATE('W')||',' DATE('N')
Say ' System IPL''ed at' Format(IPLT,4,2) 'on ' IPLYEAR||'.'||IPLDAY,
     'from ' UCBVOL 'at address ' UCBNUM

If BitAnd(IPLFLG,'08'x) = '08'x Then Do
   QIPL = 'Non-CLPA'
   End
Else Do
   QIPL = 'CLPA    '
   End

If BitAnd(IPLFLG,'04'x) = '04'x Then Do
   WIPL = 'Non-CVIO'
   End
Else Do
   WIPL = 'CVIO    '
   End

Say ' IPL Type:  Quick Start =' QIPL  '   Warm Start =' WIPL

Say ' Online Storage at IPL =' Format(C2D(STRG)/1024,5,0)||'M'
Say ' Operating System = ' OPSYS '    FMID =' FMIDS '   SMFID =' SMFID
Say ' MVS Release =' MVSREL '   DFP Release =' DFPREL ,
    '  CPU Type ='  CPUTYPE
Say

DO I=1 to 16
   PCCAADD = C2X(Storage(PVTADD,4))            /*                   */
   If X2D(PCCAADD) ^=0 Then Do
      SERIAL  = Substr(Storage(PCCAADD,12),7,6)
      CPUTYPE = Substr(Storage(PCCAADD,16),13,4)
      CPUID   = C2D(Substr(Storage(PCCAADD,18),17,2))
      Say ' CPU =' CPUID  '  Serial =' SERIAL
      End
   PVTADD  = D2X(X2D(PVTADD)+4)                /* Bump to next entry */
   End
Say
Say ' Start/End Address for MLPA   ' MLPABEG  ' - '  MLPAEND
Say ' - - - - - - - - - - - FLPA   ' FLPABEG  ' - '  FLPAEND
Say ' - - - - - - - - - - - PLPA   ' PLPABEG  ' - '  PLPAEND
Say ' - - - - - - READ/WRITE NUC   ' WNUCBEG  ' - '  WNUCEND
Say ' - - - - - -  READ-ONLY NUC   ' RNUCBEG  ' - '  RNUCEND
Say ' -  READ/WRITE EXTENDED NUC   ' ENUCBEG  ' - '  ENUCEND
Say ' - - - - - -  EXTENDED PLPA   ' EPLPABEG  ' - '  EPLPAEND
Say ' - - - - - -  EXTENDED FLPA   ' EFLPABEG  ' - '  EFLPAEND
Say ' - - - - - -  EXTENDED MLPA   ' EMLPABEG  ' - '  EMLPAEND
Exit

/*------------------------------------------------------------------*/

